package MySwordOfferTest;
import java.util.Arrays;

import MySwordOfferTest.node.*;
/*
 * 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。
 * 假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
 * 例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
 */
public class Q4 {
	public static TreeNode reConstructBinaryTree(int [] pre,int [] in) throws Exception {
		if(pre.length!=in.length) {
			throw new Exception();
		}
		if(pre==null||in==null||pre.length==0) return null;
		TreeNode root=new TreeNode(pre[0]);
		int rootVal=pre[0];
		int i=0;
		while(i<pre.length){
			if(in[i]==rootVal) break;
			i++;
		}
		if(i>=1)//表示有左孩子
			root.left=reConstructBinaryTree(Arrays.copyOfRange(pre, 1,i+1),Arrays.copyOfRange(in, 0, i));
		if(i<pre.length-1)//表示有右孩子
			root.right=reConstructBinaryTree(Arrays.copyOfRange(pre, i+1,pre.length),Arrays.copyOfRange(in,i+1, in.length));
		return root;
	}
	public static void main(String[] args) throws Exception {
		int []pre={1,2,4,7,3,5,6,8};
		int []in={4,7,2,1,5,3,8,6};
		//reConstructBinaryTree(pre,in);
		int []a=Arrays.copyOfRange(pre,1, 3);
	}
}
